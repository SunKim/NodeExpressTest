#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('expresstestcli1:server');
var http = require('http');



/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);



/**
 * Create HTTP server.
 */
var server = http.createServer(app);

//http server를 socket.io server로 upgrade
var io = require('socket.io')(server);

//connection event handler
//connection이 수립되면 event handler function의 인자로 socket인 들어옴
io.on('connection', function(socket) {

	// 접속한 클라이언트의 정보가 수신되면
	socket.on('login', function(data) {
		console.log('Client logged-in:  name:' + data.name + ', userid: ' + data.userid);

		// socket에 클라이언트 정보를 저장한다
		socket.name = data.name;
		socket.userid = data.userid;

		// 접속된 모든 클라이언트에게 메시지를 전송한다
		io.emit('login', data.name );
	});

	//클라이언트로부터의 메시지 수신
	socket.on('sendInfo', function(data) {
		console.log('sendInfo received from client : '+socket.name);

		socket.broadcast.emit('sendInfo', { 
			from : {
				name: socket.name,			//login시 이미 socket.name을 설정했음.
				userid: socket.userid
			}
		});
	});

	//클라이언트로부터의 메시지 수신
	socket.on('chat', function(data) {
		console.log('Message from %s: %s', socket.name, data.msg);

		var msg = {
			from: {
				name: socket.name,
				userid: socket.userid
			},
			msg: data.msg
		};

		//메시지를 전송한 클라이언트를 제외한 모든 클라이언트에게 메시지를 전송
		//socket.broadcast.emit('chat', msg);

		//메시지를 전송한 클라이언트에게만 메시지를 전송
		//socket.emit('s2c chat', msg);

		//접속된 모든 클라이언트에게 메시지를 전송
		//io.emit('s2c chat', msg);
		io.emit('chat', msg);

		//특정 클라이언트에게만 메시지를 전송
		//io.to(id).emit('s2c chat', data);
	});


	// force client disconnect from server
	socket.on('forceDisconnect', function() {
		socket.disconnect();
	})

	socket.on('disconnect', function() {
		console.log('user disconnected: ' + socket.name);
	});
});



/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);



/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}



/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}



/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
	console.log('Express server listening on port ' + app.get('port'));
}
